def best_first_search(graph,start,goal,heuristic, path=[]):
    open_list = [(0,start)]
    closed_list = set()
    closed_list.add(start)

    while open_list:
        open_list.sort(key = lambda x: heuristic[x[1]], reverse=True)
        cost, node = open_list.pop()
        path.append(node)

        if node==goal:
            return cost, path

        closed_list.add(node)
        for neighbour, neighbour_cost in graph[node]:
            if neighbour not in closed_list:
                open_list.append((cost+neighbour_cost, neighbour))

    return None

graph = {
    'S' : [('A',3),('B',6)],
    'A' : [('B',2),('C',4),('G',8)],
    'B' : [('C',1)],
    'C' : [('G',3)],
    'G' : []
}

heuristic = {
    'S': 7,
    'A': 6,
    'B': 2,
    'C': 1,
    'G': 0
}

start = 'S'
goal = 'G'

result = best_first_search(graph, start, goal, heuristic,[])

if result:
    print(f"Minimum cost path from {start} to {goal} is {result[1]}")
    print(f"Cost: {result[0]}")
else:
    print(f"No path from {start} to {goal}")